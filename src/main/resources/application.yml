
# nacos:
#   config:
#     server-addr: ${NACOS_SERVER_ADDRESS}
#   discovery:
#     server-addr: ${NACOS_SERVER_ADDRESS}
#   client:
#     ip: ${NACOS_CLIENT_ADDRESS}
spring:
  config:
    import: optional:file:.env[.properties]
  application:
    name: user-auth
  # cloud:
  #   nacos:
  #     discovery:
  #       server-addr: ${NACOS_SERVER_ADDRESS}
  security:
    jwt:
      key: ${JWT_KEY}
      expire: ${JWT_EXPIRE}
      limit:
        basic: ${JWT_FRESH_LIMIT_BASIC}
        aggresive: ${JWT_FRESH_LIMIT_AGGRESIVE}
        alter_frequency: ${JWT_FRESH_LIMIT_ALTER_FREQ}
  datasource:  # 配置mysql
    url: ${DATASOURCE_ADDRESS}
    username: ${DATASOURCE_USERNAME}
    password: ${DATASOURCE_PASSWORD}
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}
  mail:
    host: ${MAIL_HOST}
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    login-url: ${MAIL_LOGIN_URL:/api/auth/login/email}
    verify-cd: ${MAIL_VERIFY_CD}
    verify-available: ${MAIL_VERIFY_AVAILABLE}
  kafka:
    bootstrap-servers: ${KAFKA_ENDPOINT} #node1:9092,node2:9092,node3:9092 #Kafka集群
    producer:    #生产者配置
      retries: 0
      acks: 1    # 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
      batch-size: 16384 # 批量大小
      properties:
        linger:
          ms: 0   # 提交延时 当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka   linger.ms为0表示每接收到一条消息就提交给kafka,这时候batch-size其实就没用了
      buffer-memory: 33554432 # 生产端缓冲区大小
      key-serializer: org.apache.kafka.common.serialization.StringSerializer #Kafka提供的序列化
      value-serializer: org.apache.kafka.common.serialization.StringSerializer #Kafka提供的反序列化类
    consumer:
      properties:
        group:
          id: defaultConsumerGroup # 默认的消费组ID
        session:
          timeout:
            ms: 120000 # 消费会话超时时间(超过这个时间consumer没有发送心跳,就会触发rebalance操作)
        request:
          timeout:
            ms: 180000 # 消费请求超时时间
      enable-auto-commit: true # 是否自动提交offset
      auto-offset-reset: latest # 当kafka中没有初始offset或offset超出范围时将自动重置offset 参数值earliest:重置为分区中最小的offset; latest:重置为分区中最新的offset(消费分区中新产生的数据); none:只要有一个分区不存在已提交的offset,就抛出异常;
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer #Kafka提供的序列化
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer #Kafka提供的反序列化类
      auto-commit-interval: 1000ms # 提交offset延时(接收到消息后多久提交offset)
server:
  port: ${SERVER_PORT}  # 默认端口
  servlet:
    encoding:
      charset: UTF-8 # 默认值
      force-response: true
springdoc:
  api-docs:
    path: "/docs/api"
  # swagger-ui:
  #   path: "/docs/swagger"
  #   operationsSorter: method
logging:
  file:
    name: logs/demoApp.file.log
snowflake:
  datacenterId: ${DATACENTER}
  user:
    workId: ${USERCENTERID}
  group:
    workId: ${GROUPCENTERID}
frontend:
  address: ${FRONT_ADDRESS}

